# Ejercicios de listas

## E.1. ¿Te acuerdas cómo accedíamos a los caracteres de una cadena? Incluso con números negativos. Pues las listas funcionan igual. Pruébalo y prueba también los rangos.

>>> l = (1, 2, 3)
>>> l[-1]
3
>>> l[1:2]
(2,)

## E.2. Invierte el orden de los elementos de la lista [1, 2, 3, 4, 5].

# 2 maneras distintas:
invertida_2 = [1, 2, 3, 4, 5][::-1]
invertida_3 = list(reversed([1, 2, 3, 4, 5]))

## E.3. Las listas también se pueden crear por comprehensión (mira la sección 5.1.3 del tutorial). Prueba a crear algunas listas así, por ejemplo, alguna de un ejercicio anterior o las que te comento a continuación.

## E.4. Crea una lista por comprehensión que tenga algunos números pares

n = 10
pares = [i for i in range(n + 1) if i % 2 == 0]
* Puedes crearla de otra manera si juegas son los parámetros de range *
 
## E.5. Dada una lista de números, borra todos los números impares.

mi_lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
mi_lista = [num for num in mi_lista if num % 2 == 0]

## E.7. Dada una lista de números, reemplaza todos los números impares por 0.

mi_lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
mi_lista = [0 if num % 2 != 0 else num for num in mi_lista]

## E.8. Dada dos listas, cuenta el número de elementos de la más pequeña que están en la más grande.

lista1 = [1, 2, 3, 4, 5]
lista2 = [3, 4, 6, 7]
contador = sum(1 for elemento in lista2 if elemento in lista1)

## E.9. Dada la lista [1, 2, 3, 4, 3, 2, 1, 3, 3], cuenta cuántas veces aparece el número 3.

mi_lista.count(3)

## E.10. Crear una lista de dos dimensiones

lista_2d = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

lista_2d = list()
lista_2d.append(list())

lista_2d = [[]]

## E.11. Tenemos una lista l2 y hacemos l2 = l1 ¿Cuantas listas distintas hay? ¿Qué sucede con l2 si modificamos la lista l1 y viceversa? Pruébalo y saca tus propias conclusiones.

Cuidado, ambas variables (l1 y l2) apuntan a la misma lista en memoria. Cualquier modificación que hagas a través de l1 será visible en l2 y viceversa.


## E.12. Escribe el código necesario para copiar una lista. Asegúrate que la copia es independiente de la lista original.

lista_2=list(lista_1)

## E.13. Escribe un programa que comprima una cadena contando el número de caracteres consecutivos. Por ejemplo, "aaabbbbcc" se comprime en "a3b4c2".

def comprimir_cadena(cadena):
    resultado = []
    contador = 1
    for i in range(1, len(cadena)):
        if cadena[i] == cadena[i - 1]:
            contador += 1
        else:
            resultado.append(cadena[i - 1] + str(contador))
            contador = 1
    resultado.append(cadena[-1] + str(contador))
    return "".join(resultado)


# Ejercicios de diccionarios

## E.14. Crea un diccionario con tres pares clave-valor donde las claves sean nombres de países y los valores sus capitales. Prueba a imprimirlo a ver qué sale.

capitales = {
    "España": "Madrid",
    "Francia": "París",
    "Italia": "Roma"
}
print("Diccionario de países y capitales:", capitales)


## E.15. A partir del diccionario anterior, muestra en pantalla la capital de uno de los países.

print(capitales["España")


## E.16. Recorre el diccionario anterior, mostrando todos los países y capitales que contenga.

for pais, capital in capitales.items():
    print(f"País: {pais}, Capital: {capital}")


## E.17. Escribe un método que reciba un país, si existe devuelve su capital, pero si no, no devuelve "no existe".

def obtener_capital(pais):
    # Verificar si el país existe en el diccionario
    if pais in capitales:
        return capitales[pais]
    else:
        return "no existe"


## E.18. Los diccionarios también se pueden crear por comprehensión. Por ejemplo, para crear un diccionario a partir de una lista usando los índices como clave y eligiendo solo los índices pares, lo puedes hacer así.

pares_dict = {v: lista[v] for v in range(0, len(lista)) if v % 2 == 0}

Te pongo dos ejercicios para que lo intentes tú. Crea un diccionario a partir dos listas de igual tamaño dónde las claves sean los elementos de una lista y los valores los elementos de la otra lista.
Y otro ejemplo, a partir de un diccionario, crea un nuevo diccionario donde las claves sean los valores y los valores sean las claves.

listas_dict = {lista[i]: lista2[i] for i in range(len(lista))}

inverted_dict = {v: k for k, v in capitales.items()}


## E.19. Crea un diccionario de dos claves

Una manera de hacerla puede ser guardando un diccionario dentro de otro diccionario, aquí tienes algunos ejemplos de uso:
doble_dict = {“A”: {“B”: “Valor 1”}}

doble_dict = {"A": {"B": "Valor 1"}}
dobre_dict["A"]["B"]
doble_dict["A"]["B"]
'Valor 1'
doble_dict["B"]={"X": "Valor 2"}
doble_dict["A"]["C"] = "Valor 3"
doble_dict
{'A': {'B': 'Valor 1', 'C': 'Valor 3'}, 'B': {'X': 'Valor 2'}}

## E.20. Modifica una lista para que no tenga elementos repetidos. Si quieres hacerlo sin usar un diccionario, adelante. Luego compara los resultados y saca tus conclusiones.

* Un diccionario es similar a una lista por lo que todo lo que has aprendido con los ejercicios de las listas también te sirve para los diccionarios. Haz algunas pruebas para asegurar que has aprendido los conceptos. Esto distingue a los buenos programadores de los aprietateclas. *

## E.21. Imagina que solo quieres un tipo de datos que guarde valores únicos. Podrías usar un diccionario, pero solo te sirven las claves, no los valores. en este caso, Python te da Set que es algo más cómodo de usar. Lo tienes en el tutorial en este enlace: https://docs.python.org/3/tutorial/datastructures.html#sets
En vez de pedirte un ejercicio, te pongo un ejemplo: crear una lista a partir de otra que no tenga elementos repetidos. Piénsalo antes de ver el código.

>>> lista_unica = list(set(lista))
>>> lista_unica
[1, 2, 3, 4, 5]


